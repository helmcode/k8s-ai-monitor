from typing import Dict, Any, Optional
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from utils.logging import setup_logger

logger = setup_logger(__name__)

class SlackNotifier:
    def __init__(self, token, default_channel="#tests"):
        self.client = WebClient(token=token)
        self.default_channel = default_channel

    def send_alert(self, issue: Dict[str, Any], diagnosis: str, recommendations: str, channel: Optional[str] = None) -> bool:
        """
        Sends an alert about a Kubernetes issue

        Args:
            issue: Object with issue details
            diagnosis: Analysis generated by the LLM
            recommendations: Recommendations generated by the LLM
            channel: Slack channel (optional)

        Returns:
            bool: True if alert was sent successfully, False otherwise
        """
        if not channel:
            channel = self.default_channel

        try:
            blocks = [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": f"⚠️ Kubernetes Alert: {issue['resource_type']} {issue['resource_name']}",
                        "emoji": True
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {
                            "type": "mrkdwn",
                            "text": f"*Cluster:*\n{issue['cluster']}"
                        },
                        {
                            "type": "mrkdwn",
                            "text": f"*Namespace:*\n{issue['namespace']}"
                        },
                        {
                            "type": "mrkdwn",
                            "text": f"*Type:*\n{issue['issue_type']}"
                        },
                        {
                            "type": "mrkdwn",
                            "text": f"*Detected:*\n{issue['timestamp']}"
                        }
                    ]
                },
                {
                    "type": "divider"
                },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"*Diagnosis:*\n{diagnosis}"
                    }
                }
            ]


            if recommendations:
                blocks.append({
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"*Recommendations:*\n{recommendations}"
                    }
                })

            if "logs" in issue["details"] and issue["details"]["logs"]:
                # Take only the last 5 lines to avoid saturation
                logs = issue["details"]["logs"].strip().split("\n")[-5:]
                log_text = "\n".join(logs)

                blocks.append({
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"*Relevant logs:*\n```{log_text}```"
                    }
                })

            # Send message to Slack
            response = self.client.chat_postMessage(
                channel=channel,
                text=f"Kubernetes Alert: {issue['issue_type']} in {issue['resource_name']}",
                blocks=blocks
            )
            logger.info(f"Alert sent to Slack: {response['ts']}")
            return True

        except SlackApiError as e:
            logger.error(f"Error sending alert to Slack: {str(e)}")
            return False
